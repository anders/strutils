package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"
)

func parseBlocks(r io.Reader, buf *bytes.Buffer) error {
	buf.WriteString("var unicodeBlocks = []unicodeBlock{\n")
	scanner := bufio.NewScanner(r)
	scanner.Split(bufio.ScanLines)

	for scanner.Scan() {
		line := scanner.Text()

		// 0100..017F; Latin Extended-A
		idx := strings.IndexByte(line, ';')
		if idx < 1 {
			continue
		}

		if line[0] == '#' {
			continue
		}

		hexRange := line[0:idx]
		name := line[idx+2:]

		// look for ".."
		idx = strings.IndexByte(hexRange, '.')
		if idx < 0 {
			continue
		}

		fromHex := hexRange[0:idx]
		toHex := hexRange[idx+2:]

		from, err := strconv.ParseInt(fromHex, 16, 32)
		if err != nil {
			return fmt.Errorf("failed to parse hex(1): %w", err)
		}

		to, err := strconv.ParseInt(toHex, 16, 32)
		if err != nil {
			return fmt.Errorf("failed to parse hex(2): %w", err)
		}

		buf.WriteString(fmt.Sprintf("{0x%x, 0x%x, %#v},\n", from, to, name))
	}

	buf.WriteString("}\n")
	return nil
}

func parseUnicodeData(r io.Reader, buf *bytes.Buffer) error {
	buf.WriteString("var unicodeData = []unicodeRow{\n")

	scanner := bufio.NewScanner(r)
	scanner.Split(bufio.ScanLines)

	for scanner.Scan() {
		line := scanner.Text()

		tmp := strings.Split(line, ";")

		r, err := strconv.ParseInt(tmp[0], 16, 32)
		if err != nil {
			return err
		}

		buf.WriteString(fmt.Sprintf("{0x%x, %#v, %#v},\n", r, tmp[1], tmp[10]))
	}

	buf.WriteString("}\n")

	return nil
}

func main() {
	buf := &bytes.Buffer{}
	buf.WriteString("// generated by unicodegen\n")
	buf.WriteString("package strutils\n")

	f, err := os.Open("Blocks.txt")
	if err != nil {
		log.Fatalf("error opening Blocks.txt: %w", err)
	}
	defer f.Close()

	if err := parseBlocks(f, buf); err != nil {
		log.Fatal(err)
	}

	f, err = os.Open("UnicodeData.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	if err := parseUnicodeData(f, buf); err != nil {
		log.Fatal(err)
	}

	// gofmt
	src, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	if err := ioutil.WriteFile("unicodedata_gen.go", src, 0644); err != nil {
		log.Fatal(err)
	}
}
